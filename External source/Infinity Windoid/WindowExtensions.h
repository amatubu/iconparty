/*	File:		WindowExtensions.h		Contains:	Prototypes and data structures for the floating window library		Written by:	Dean Yu	Updated by: Dave Johnson		Copyright:	© 1993-1995 Apple Computer, Inc.		Changes:		See WindowExtensions.c	*/#ifndef __WINDOWEXTENSIONS__#define __WINDOWEXTENSIONS__#ifndef __WINDOWS__#ifdef __APPLE_CC__#include	<Carbon/Carbon.h>#else#include <Windows.h>#endif#endif// Window Attributesenum MyWindowAttributes {	kHasCloseBoxMask = 				0x00000001,	kHasZoomBoxMask = 				0x00000002,	kHasGrowBoxMask = 				0x00000004,	kHasModalBorderMask = 			0x00000010,	kHasThickDropShadowMask = 		0x00000020,	kHasSideTitleBarMask = 			0x00000040, // dkj added 6/95	kHasDocumentTitlebarMask = 		0x00001000,	kHasPaletteTitlebarMask = 		0x00002000,	kHasRoundedTitlebarMask = 		0x00004000,// Attribute groupings	kWindowGadgetsMask =			0x0000000F,	kWindowAdornmentsMask =			0x00000FF0,	kWindowTitlebarMask =			0x000FF000};typedef unsigned long MyWindowAttributes;// Activate event handler prototypetypedef pascal void (*ActivateHandlerProcPtr)(WindowRef theWindow, Boolean activateWindow);#if !TARGET_CARBON #if GENERATINGCFMenum {	uppActivateHandlerProcInfo = kPascalStackBased		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(WindowRef)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Boolean)))};typedef UniversalProcPtr ActivateHandlerUPP;#define CallActivateHandlerProc(userRoutine, theWindow, activateWindow)		\		CallUniversalProc(userRoutine, uppActivateHandlerProcInfo, theWindow, activateWindow)#define NewActivateHandlerProc(userRoutine)		\		(ActivateHandlerUPP) NewRoutineDescriptor((userRoutine), uppActivateHandlerProcInfo, GetCurrentISA())#elsetypedef ActivateHandlerProcPtr ActivateHandlerUPP;#define CallActivateHandlerProc(userRoutine, theWindow, activateWindow)		\		(*userRoutine)(theWindow, activateWindow)#define NewActivateHandlerProc(userRoutine)		\		(ActivateHandlerUPP)(userRoutine)#endif#elsetypedef ActivateHandlerProcPtr ActivateHandlerUPP;#define CallActivateHandlerProc(userRoutine, theWindow, activateWindow)		\		(*userRoutine)(theWindow, activateWindow)#define NewActivateHandlerProc(userRoutine)		\		(ActivateHandlerUPP)(userRoutine)#endifenum {	kActivateWindow				= true,	kDeactivateWindow			= false};// Extensions to the Window#if powerc#pragma options align=mac68k#endifstruct WindowRefExtensions {	ActivateHandlerUPP			activateHandlerProc;	Boolean						wasVisible;	short						windowKind;	long						userRefCon;  // replacement refCon for the user};#if powerc#pragma options align=reset#endiftypedef struct WindowRefExtensions WindowRefExtensions;// our floater windowKindenum {	kApplicationFloaterKind = 7};// Set up to use the Infinity WDEF. Should really do this at runtime,// using 7.5 WDEF if running 7.5, infinity otherwise.#include "InfinityWindoid.h"enum {	kMyFloaterProc			= kInfinityProc, // floatProc,	kMyFloaterResID			= kInfinityWindoidID, // kFloatingWindowDefinition,	kFloaterGrowVariantCode = 2, // These variant codes should be in the Universal headers,	kFloaterZoomVariantCode = 4	 // it seems to me, but they aren't. Maybe floaters should 								 // never have these, but Infinity does.};// Error codesenum {	kUndefinedTitleBarTypeError = -1,	kWindowNotCreatedError = -2,	kInvalidWindowOrderingError = -3};#ifdef __cplusplusextern "C" {#endif// Floating window routinesextern pascal OSErr NewWindowReference(WindowRef *windowReference,			const Rect *boundsRect, ConstStr255Param title, Boolean visible,			MyWindowAttributes attributes, WindowRef behind, long refCon,			ActivateHandlerUPP activateHandlerProc);extern pascal OSErr GetNewWindowReference(WindowRef *windowReference,			short windResourceID, WindowRef behind,			ActivateHandlerUPP activateHandlerProc);extern pascal void DisposeWindowReference(WindowRef windowReference);#if TARGET_API_MAC_CARBON#define	SelectReferencedWindow(w)		SelectWindow(w)#define	HideReferencedWindow(w)			HideWindow(w)#define	ShowReferencedWindow(w)			ShowWindow(w)#define	DragReferencedWindow(w,pt,r)	DragWindow(w,pt,r)#elseextern pascal void SelectReferencedWindow(WindowRef windowToSelect);extern pascal void HideReferencedWindow(WindowRef windowToHide);extern pascal void ShowReferencedWindow(WindowRef windowToShow);extern pascal void DragReferencedWindow(WindowRef windowToDrag, Point startPoint, const Rect *draggingBounds);#endif#if TARGET_API_MAC_CARBON#define	MyFrontNonFloatingWindow()		FrontNonFloatingWindow()#elseextern pascal WindowRef MyFrontNonFloatingWindow(void);#endifextern pascal WindowRef LastFloatingWindow(void);extern pascal Boolean WindowIsModal(WindowRef windowReference);#if TARGET_API_MAC_CARBON#define	DeactivateFloatersAndFirstDocumentWindow()	{gFrontWindow = FrontNonFloatingWindow(); gIsDialog=true;}#define ActivateFloatersAndFirstDocumentWindow()	{gFrontWindow = nil; gIsDialog=false;}#elseextern pascal void DeactivateFloatersAndFirstDocumentWindow(void);extern pascal void ActivateFloatersAndFirstDocumentWindow(void);#endif#if TARGET_API_MAC_CARBON#define	SuspendFloatingWindows()	#define	ResumeFloatingWindows()		#elseextern pascal void SuspendFloatingWindows(void);extern pascal void ResumeFloatingWindows(void);#endifextern pascal void ValidateWindowList(void);// Getters and Settersextern pascal ActivateHandlerUPP GetActivateHandlerProc(WindowRef windowReference);extern pascal void SetActivateHandlerProc(WindowRef windowReference, ActivateHandlerUPP activateHandlerProc);// replacements for Get/SetWRefConextern pascal long GetExtWRefCon(WindowRef windowReference);extern pascal void SetExtWRefCon(WindowRef windowReference, long refCon);// handy routine exported for apps to useextern pascal WindowRef GetNextVisibleWindow(WindowRef window);extern Boolean	IsFrontProcess(void);#ifdef __cplusplus}#endif#endif// Globalsextern Boolean		gIsDialog;extern WindowPtr	gFrontWindow;